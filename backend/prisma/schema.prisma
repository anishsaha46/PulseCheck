// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  name          String
  verified      Boolean  @default(false)
  verificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  subscription  Subscription?
  monitors      Monitor[]
  alerts        Alert[]
  incidentHistory IncidentHistory[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([verified])
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  planName      String   @default("free") // free, pro, enterprise
  maxMonitors   Int      @default(5)
  maxAlerts     Int      @default(10)
  retentionDays Int      @default(7)
  
  status        String   @default("active") // active, canceled, expired
  trialsRemaining Int    @default(1)
  
  createdAt     DateTime @default(now())
  expiresAt     DateTime?
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model Monitor {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name          String
  url           String
  method        String   @default("GET") 
  headers       Json?   
  body          Json?    // POST/PUT body
  
  intervalSec   Int      @default(60)    // Check interval in seconds
  timeoutMs     Int      @default(10000) // Request timeout
  followRedirects Boolean @default(true)
  maxRedirects  Int      @default(5)
  
  isActive      Boolean  @default(true)
  isDeleted     Boolean  @default(false) // Soft delete for retention
  
  checks        Check[]
  incidents     Incident[]
  alerts        Alert[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
  @@index([isDeleted])
}

model Check {
  id            String   @id @default(cuid())
  monitorId     String
  monitor       Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  
  statusCode    Int?     
  latencyMs     Int      // Response time in milliseconds
  responseSizeBytes Int? // Response body size
  responseHeaders Json?  // Captured response headers
  
  status        String   // "up", "down", "timeout", "error"
  error         String?  
  
  startAt       DateTime @default(now())
  endAt         DateTime @default(now())
  
  createdAt     DateTime @default(now())

  @@index([monitorId])
  @@index([createdAt])
  @@index([status])
}

model IncidentHistory {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  incidentType  String   // "incident_created", "incident_resolved", "threshold_breached"

  message       String
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Incident {
  id            String   @id @default(cuid())
  monitorId     String
  monitor       Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  
  status        String   @default("open")   // open, resolved, acknowledged
  failureCount  Int      @default(1)
  successCount  Int      @default(0)
  
  startAt       DateTime @default(now())
  endAt         DateTime?  // When resolved
  acknowledgedAt DateTime?
  
  rootCause     String?  // Description of issue
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([monitorId])
  @@index([status])
  @@index([createdAt])
}

model Alert {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  monitorId     String
  monitor       Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  
  // Alert configuration
  type          String   // "email", "webhook"
  channel       String   // Email address or webhook URL
  threshold     Int      @default(3)   // Consecutive failures before alert
  recoveryCount Int      @default(2)   // Consecutive successes to resolve
  
  isEnabled     Boolean  @default(true)
  
  // Alert delivery tracking
  lastSentAt    DateTime?
  lastStatus    String?  // "sent", "failed", "pending"
  consecutiveFails Int    @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, monitorId, channel]) // Prevent duplicate alerts
  @@index([userId])
  @@index([monitorId])
}

model AlertDelivery {
  id            String   @id @default(cuid())
  alertId       String   // Reference to Alert (not FK to prevent cascade issues)
  
  status        String   // "delivered", "failed", "bounced"
  statusCode    Int?     // HTTP status for webhooks
  error         String?  
  
  sentAt        DateTime @default(now())
  retryCount    Int      @default(0)
  nextRetryAt   DateTime?

  @@index([alertId])
  @@index([sentAt])
  @@index([status])
}